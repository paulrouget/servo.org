{"id":"PPM311","version":17,"snippetIdentifier":"PPM311-17","jsonPayload":"{\"code\":\"var createScene = async function() {\\r\\n    // Create scene\\r\\n\\tvar scene = new BABYLON.Scene(engine);\\r\\n\\r\\n    // Create simple sphere\\r\\n    var sphere = BABYLON.Mesh.CreateIcoSphere(\\\"sphere\\\", {radius:0.2, flat:true, subdivisions: 1}, scene);\\r\\n    sphere.position.y = 1;\\r\\n    sphere.material = new BABYLON.StandardMaterial(\\\"sphere material\\\",scene)\\r\\n\\r\\n    // Lights and camera\\r\\n    var light = new BABYLON.DirectionalLight(\\\"light\\\", new BABYLON.Vector3(0, -0.5, 1.0), scene);\\r\\n    light.position = new BABYLON.Vector3(0, 5, -2);\\r\\n    var camera = new BABYLON.ArcRotateCamera(\\\"camera\\\", -Math.PI / 2, Math.PI / 4, 3, new BABYLON.Vector3(0, 1, 0), scene);\\r\\n    camera.attachControl(canvas, true);\\r\\n    scene.activeCamera.beta += 0.8;\\r\\n\\r\\n    // Default Environment\\r\\n    var environment = scene.createDefaultEnvironment({ enableGroundShadow: true, createSkybox: false, groundOpacity: 0 });\\r\\n    environment.ground.parent.position.y = 0;\\r\\n    environment.ground.position.y = 0\\r\\n    \\r\\n    // Shadows\\r\\n    var shadowGenerator = new BABYLON.ShadowGenerator(1024, light);\\r\\n    shadowGenerator.useBlurExponentialShadowMap = true;\\r\\n    shadowGenerator.blurKernel = 32;\\r\\n    shadowGenerator.addShadowCaster(sphere, true);\\r\\n\\r\\n    // Enable XR\\r\\n    var xr = await scene.createDefaultXRExperienceAsync({floorMeshes: [environment.ground]})\\r\\n    xr.baseExperience.onStateChangedObservable.add((state)=>{\\r\\n        if(state === BABYLON.WebXRState.IN_XR){\\r\\n            // When entering webXR, position the user's feet at 0,0,-1\\r\\n            xr.baseExperience.setPositionOfCameraUsingContainer(new BABYLON.Vector3(0,xr.baseExperience.camera.position.y,-1))\\r\\n        }        \\r\\n    })\\r\\n    xr.enterExitUI[\\\"_buttons\\\"][0].sessionMode = \\\"immersive-ar\\\";\\r\\n\\r\\n    // Runs every frame to rotate the sphere\\r\\n    scene.onBeforeRenderObservable.add(()=>{\\r\\n        sphere.rotation.y += 0.0001*scene.getEngine().getDeltaTime();\\r\\n        sphere.rotation.x += 0.0001*scene.getEngine().getDeltaTime();\\r\\n    })\\r\\n\\r\\n    // GUI\\r\\n    var plane = BABYLON.Mesh.CreatePlane(\\\"plane\\\", 1);\\r\\n    plane.position = new BABYLON.Vector3(0.4, 1.5, 0.4)\\r\\n    var advancedTexture = BABYLON.GUI.AdvancedDynamicTexture.CreateForMesh(plane);\\r\\n    var panel = new BABYLON.GUI.StackPanel();    \\r\\n    advancedTexture.addControl(panel);  \\r\\n    var header = new BABYLON.GUI.TextBlock();\\r\\n    header.text = \\\"Color GUI\\\";\\r\\n    header.height = \\\"100px\\\";\\r\\n    header.color = \\\"white\\\";\\r\\n    header.textHorizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\\r\\n    header.fontSize = \\\"120\\\"\\r\\n    panel.addControl(header); \\r\\n    var picker = new BABYLON.GUI.ColorPicker();\\r\\n    picker.value = sphere.material.diffuseColor;\\r\\n    picker.horizontalAlignment = BABYLON.GUI.Control.HORIZONTAL_ALIGNMENT_CENTER;\\r\\n    picker.height = \\\"350px\\\";\\r\\n    picker.width = \\\"350px\\\";\\r\\n    picker.onValueChangedObservable.add(function(value) {\\r\\n        sphere.material.diffuseColor.copyFrom(value);\\r\\n    });\\r\\n    panel.addControl(picker);\\r\\n    \\r\\n\\treturn scene;\\r\\n};\"}","name":"","description":"","tags":""}